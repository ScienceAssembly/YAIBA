from yaiba.log.test_utils import encode_and_then_decode
from yaiba.log.types import RawEntry, VRCPlayerId
from yaiba.log.vrc.entries.yodokoro_tag_marker import TAG_NAMES_USED_IN_SCIENCE_ASSEMBLY, VRCYodokoroTagMarkerEntry, \
    YodokoroTagMarkerEntryParser
from yaiba.log.vrc.utils import parse_timestamp


class TestYodokoroTagMarkerEntry:
    def test__regex(self):
        output = YodokoroTagMarkerEntryParser.regex_pattern.match(
            "2022.03.05 00:31:57 Log        -  [Yodo][Dump][0,-1,00000000],[1,9,00000008],[2,10,00000008],[3,94,"
            "00000000],[4,91,00004000],[5,23,00008013],[6,44,00000000],[7,-1,00000000],[8,-1,00000000],[9,97,"
            "00000010],[10,28,00010000],[11,30,00000030],[12,98,00000001],[13,32,00038880],[14,-1,00000000],[15,27,"
            "00000800],[16,37,00008002],[17,47,00000001],[18,96,00000020],[19,8,00000000],[20,78,00001802],[21,-1,"
            "00000000],[22,81,00010000],[23,86,00000882],[24,82,00000018],[25,-1,00000000],[26,-1,00000000],[27,-1,"
            "00000000],[28,-1,00000000],[29,-1,00000000],[30,-1,00000000],[31,-1,00000000],[32,-1,00000000],[33,-1,"
            "00000000],[34,-1,00000000],[35,-1,00000000],[36,-1,00000000],[37,-1,00000000],[38,-1,00000000],[39,-1,"
            "00000000],[40,-1,00000000],[41,-1,00000000],[42,-1,00000000],[43,-1,00000000],[44,-1,00000000],[45,-1,"
            "00000000],[46,-1,00000000],[47,-1,00000000],[48,-1,00000000],[49,-1,00000000],[50,-1,00000000],[51,-1,"
            "00000000],[52,-1,00000000],[53,-1,00000000],[54,-1,00000000],[55,-1,00000000],[56,-1,00000000],[57,-1,"
            "00000000],[58,-1,00000000],[59,-1,00000000],[60,-1,00000000],[61,-1,00000000],[62,-1,00000000],[63,-1,"
            "00000000],[64,-1,00000000],[65,-1,00000000],[66,-1,00000000],[67,-1,00000000],[68,-1,00000000],[69,-1,"
            "00000000],[70,-1,00000000],[71,-1,00000000],[72,-1,00000000],[73,-1,00000000],[74,-1,00000000],[75,-1,"
            "00000000],[76,-1,00000000],[77,-1,00000000],[78,-1,00000000],[79,-1,00000000],[80,-1,00000000],[81,-1,"
            "00000000],")

        assert output is not None

    def test__parse(self):
        parser = YodokoroTagMarkerEntryParser(tag_names=TAG_NAMES_USED_IN_SCIENCE_ASSEMBLY)
        output = parser.parse(RawEntry(
            "2022.03.05 00:31:57 Log        -  [Yodo][Dump][0,-1,00000000],[1,9,00000008],[2,10,00000008],[3,94,"
            "00000000],[4,91,00004000],[5,23,00008013],[6,44,00000000],[7,-1,00000000],[8,-1,00000000],[9,97,"
            "00000010],[10,28,00010000],[11,30,00000030],[12,98,00000001],[13,32,00038880],[14,-1,00000000],[15,27,"
            "00000800],[16,37,00008002],[17,47,00000001],[18,96,00000020],[19,8,00000000],[20,78,00001802],[21,-1,"
            "00000000],[22,81,00010000],[23,86,00000882],[24,82,00000018],[25,-1,00000000],[26,-1,00000000],[27,-1,"
            "00000000],[28,-1,00000000],[29,-1,00000000],[30,-1,00000000],[31,-1,00000000],[32,-1,00000000],[33,-1,"
            "00000000],[34,-1,00000000],[35,-1,00000000],[36,-1,00000000],[37,-1,00000000],[38,-1,00000000],[39,-1,"
            "00000000],[40,-1,00000000],[41,-1,00000000],[42,-1,00000000],[43,-1,00000000],[44,-1,00000000],[45,-1,"
            "00000000],[46,-1,00000000],[47,-1,00000000],[48,-1,00000000],[49,-1,00000000],[50,-1,00000000],[51,-1,"
            "00000000],[52,-1,00000000],[53,-1,00000000],[54,-1,00000000],[55,-1,00000000],[56,-1,00000000],[57,-1,"
            "00000000],[58,-1,00000000],[59,-1,00000000],[60,-1,00000000],[61,-1,00000000],[62,-1,00000000],[63,-1,"
            "00000000],[64,-1,00000000],[65,-1,00000000],[66,-1,00000000],[67,-1,00000000],[68,-1,00000000],[69,-1,"
            "00000000],[70,-1,00000000],[71,-1,00000000],[72,-1,00000000],[73,-1,00000000],[74,-1,00000000],[75,-1,"
            "00000000],[76,-1,00000000],[77,-1,00000000],[78,-1,00000000],[79,-1,00000000],[80,-1,00000000],[81,-1,"
            "00000000],"
        ))
        assert isinstance(output, VRCYodokoroTagMarkerEntry)
        assert all(isinstance(k, VRCPlayerId) for k in output.tag_names_for_player_id.keys())
        assert output == VRCYodokoroTagMarkerEntry(
            timestamp=parse_timestamp("2022.03.05 00:31:57"),
            tag_names_for_player_id={
                8: [],
                9: ['物理学'],
                10: ['物理学'],
                23: ['機械工学',
                    '電気系工学',
                    '化学',
                    '製造学'],
                27: ['情報学'],
                28: ['文系'],
                30: ['化学', '生物学'],
                32: ['数学',
                    '情報学',
                    '製造学',
                    '文系',
                    'その他'],
                37: ['電気系工学', '製造学'],
                44: [],
                47: ['機械工学'],
                78: ['電気系工学', '情報学', '医学'],
                81: ['文系'],
                82: ['物理学', '化学'],
                86: ['電気系工学', '数学', '情報学'],
                91: ['地学'],
                94: [],
                96: ['生物学'],
                97: ['化学'],
                98: ['機械工学']
            },
        )

    def test__from_json(self):
        entry = VRCYodokoroTagMarkerEntry(
            timestamp=parse_timestamp("2022.03.05 00:31:57"),
            tag_names_for_player_id={
                8: [],
                9: ['物理学'],
                10: ['物理学'],
                23: ['機械工学',
                    '電気系工学',
                    '化学',
                    '製造学'],
                27: ['情報学'],
                28: ['文系'],
                30: ['化学', '生物学'],
                32: ['数学',
                    '情報学',
                    '製造学',
                    '文系',
                    'その他'],
                37: ['電気系工学', '製造学'],
                44: [],
                47: ['機械工学'],
                78: ['電気系工学', '情報学', '医学'],
                81: ['文系'],
                82: ['物理学', '化学'],
                86: ['電気系工学', '数学', '情報学'],
                91: ['地学'],
                94: [],
                96: ['生物学'],
                97: ['化学'],
                98: ['機械工学']
            },
        )
        output = encode_and_then_decode(entry)
        assert output == entry
        assert all(isinstance(k, VRCPlayerId) for k in output.tag_names_for_player_id.keys())
